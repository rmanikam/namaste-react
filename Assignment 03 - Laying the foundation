Q1) What is JSX?
A1) JSX is Javascript Extension Syntax written in React to easily write HTML and Javascript together.

const jsx = <h1>This is JSX</h1>
This is simple JSX code in React. But the browser does not understand this JSX because it's not valid JavaScript code. This is because we're assigning an HTML tag to a variable that is not a string but just HTML code.
So to convert it to browser understandable JavaScript code, we use a tool like Babel 
We can use the above JSX in our React code like this:
class JSXDemo extends React.Component {
render() {
return <h1>This is JSX</h1>;
    }
}
ReactDOM.render(<JSXDemo />, document.getElementById('root'));which is a JavaScript compiler/transpiler.
Here, we're returning the JSX from the JSXDemo component and rendering that on the screen using the ReactDOM.render method.
When the Babel executes the above JSX, it converts it to the following code:
As you can see in the above Code Sandbox, the code still correctly prints the contents to the screen using React.createElement.
This was the old way of writing code in React – but it's tedious to write the React.createElement every time, even for adding a simple div.
So React introduced the JSX way of writing code which makes code easy to write and understand.
The React.createElement has the following syntax:
React.createElement(type, [props], [...children])
Let’s look at the parameters of the createElement function.
type can be an HTML tag like h1, div or it can be a React component
props are the attributes you want the element to have
children contain other HTML tags or can be a component

Q2) What are the superpowers of JSX?
A2) JSX makes our developers life easy so that is why we use JSX in React.
JSX takes care of the injection attacks by sanitizing the data that we get from api. It prevents cross site scripting attack.
Q3) what is the role of type attribute in script tag? What options can I use there?
A3) The type attribute specifies the type of the script. The type attribute identifies the content between the <script> and </script> tags.
Attribute is not set (default), an empty string, or a JavaScript MIME type
This attribute indicates the type of script represented. The value of this attribute will be one of the following: This value indicates that the body of the element contains an import map. The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.
module
This value causes the code to be treated as a JavaScript module. The processing of the script contents is deferred. The charset and defer attributes have no effect. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.

Speculationrules
This value indicates that the body of the element contains speculation rules. Speculation rules take the form of a JSON object that determine what resources should be prefetched or prerendered by the browser. 

Q4) Composition of Component
A4) const Heading = () => (
    <h1 className="heading">
     I am learning Namaste React
    </h1>
)

const HeadingComponent = () =>
{
    return (
        <h1> This is Functional Component</h1>
        <Heading />
    )
}

Q5) { TitleComponent } vs { <TitleComponent /> } vs  { <TitleComponent><TitleComponent /> }
A5) 
// import React from "react";
// import TitleComponent from "./TitleComponent";

let TitleComponent = 60000;
// const Title = () => {
// case 1: Inside Component insert Element
// 
// {TitleComponent};
//}
// case 2: Inside Component insert a Component
// const TitleComponent = () =>
<!-- {
    return (
        <NewComponent />
    )
} -->

<!-- const NewComponent = () =>
{
    return (
      <p>this is new component</p>
    )
} -->

case 3:  <TitleComponent><TitleComponent /> 


<Title Component /> and  <TitleComponent><TitleComponent />  are same thing
but if we have to include children then they are not same

example 
 <TitleComponent>
   <Heading1/>
   <Heading2 />
   <Heading3 />
 <TitleComponent /> 

// case 3: Insert element within an element
// let title = "abc";
// let newTitle = "def";


// title = newTitle;
// console.log(("title", title));


// case 4: Insert component within Element


// let newTitle = <TitleComponent />;
// let title;
// title = newTitle;
// return newTitle;


// };


// export default title;


<!-- Coding Assignment -->
<!-- 
const header = React.createElement("div", {class: "title"}, 
React.createElement("h1", "h2", "h3", {}, ));


const root = ReactDOM.createRoot(document.getElementById("root"));


root.render(heading); -->

